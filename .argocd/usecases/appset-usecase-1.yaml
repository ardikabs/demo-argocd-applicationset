apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: stg-backend-apps
  namespace: argocd
spec:
  syncPolicy:
    preserveResourcesOnDeletion: true
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - matrix:
        generators:
          - matrix:
              generators:
                - git:
                    repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
                    revision: HEAD
                    files:
                      - path: helm/*/.argocd.yaml
                    values:
                      environment: "stg"
                      domain: "backend"
                - clusters:
                    selector:
                      matchLabels:
                        cluster/env: "{{ .values.environment }}"
                        cluster/domain: "{{ .values.domain }}"
          - matrix:
              generators:
                - git:
                    repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
                    revision: HEAD
                    files:
                      - path: helm/runtimes.yaml
                # this `list` generator is used as a control mechanism as well as value shortcuts
                # control mechanism:
                # - if the `enabled` field is set to `true`, the application will be enabled as in allow to be deployed for the given domain and environment
                # - if the `excluded` field is set to `true`, the application will be excluded from the deployment for the target cluster
                # value shortcuts:
                # - `clusterName`: the name of the cluster
                # - `clusterPrefix`: the prefix of the cluster
                # - `clusterSuffix`: the suffix of the cluster
                - list:
                    elements:
                      - values:
                          clusterName: "{{ .name }}"
                          clusterPrefix: '{{ index .metadata.labels "cluster/prefix" }}'
                          clusterSuffix: '{{ index .metadata.labels "cluster/suffix" }}'
                          enabled: '{{ dig .values.domain .values.environment "enabled" false .deployments }}'
                          excluded: '{{ dig "clusterExclusions" .name false . }}'
      selector:
        matchExpressions:
          - key: values.excluded
            operator: NotIn
            values:
              - "true"

          - key: values.enabled
            operator: In
            values:
              - "true"
  template:
    metadata:
      name: "{{ .values.clusterPrefix }}-{{ index .path.segments 1 }}-{{ .values.clusterSuffix }}"
      annotations:
        applicationset/params: "{{ . | toJson }}"
      labels:
        systems.ardikabs.com/service: "{{ index .path.segments 1 }}"
        systems.ardikabs.com/cluster: "{{ .values.clusterName }}"
        systems.ardikabs.com/env: "{{ .values.environment }}"
        systems.ardikabs.com/domain: "{{ .values.domain }}"
      namespace: argocd
    spec:
      project: stg-backend-apps
      source:
        repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
        targetRevision: HEAD
        path: "helm/{{ index .path.segments 1 }}"
        helm:
          releaseName: "{{ index .path.segments 1 }}"
      destination:
        name: "{{ .values.clusterName }}"
        namespace: "{{ .namespace }}"
  templatePatch: |-
    {{- $globals := .globals }}
    {{- $defVal := dig .values.environment dict .defaults.environments }}
    {{- $runtime := dig .values.clusterName dict .clusters }}
    {{- $svc := dig .values.domain .values.environment dict .deployments }}

    spec:
      source:
        helm:
          valueFiles: {{ default $defVal.helm.valueFiles (dig "helm" "valueFiles" list $svc) | toJson }}

          {{- $runtimeHelmParameters := dig "helm" "parameters" list $runtime }}
          {{- $svcHelmParameters := dig "helm" "parameters" list $svc }}
          parameters: {{ concat $runtimeHelmParameters $svcHelmParameters | toJson }}

      syncPolicy: {{ default $defVal.syncPolicy (dig "syncPolicy" dict $svc) | toJson }}

      {{- $svcIgnoreDifferences := dig "ignoreDifferences" list $svc }}
      {{- $ignoreDifferences := concat $globals.ignoreDifferences $svcIgnoreDifferences }}
      ignoreDifferences: {{ $ignoreDifferences | toJson }}
