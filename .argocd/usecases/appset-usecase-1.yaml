apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: stg-backend-apps
  namespace: argocd
spec:
  syncPolicy:
    preserveResourcesOnDeletion: true
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - matrix:
        generators:
          - matrix:
              generators:
                - git:
                    repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
                    revision: HEAD
                    files:
                      - path: helm/*/.argocd.yaml
                    values:
                      environment: "stg"
                      domain: "backend"
                - clusters:
                    selector:
                      matchLabels:
                        cluster/env: "{{ .values.environment }}"
                        cluster/domain: "{{ .values.domain }}"
          - matrix:
              generators:
                - git:
                    repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
                    revision: HEAD
                    files:
                      - path: helm/runtimes.yaml
                # this `list` generator is used as a control mechanism as well as value shortcuts
                # Control Mechanism:
                # - `active`: it indicates if the application is allowed to be deployed to the destination cluster associated with the given domain and environment,
                #             this value is computed by checking from `.argocd.yaml` file:
                #             - the `deployments.<domain>.<environment>.enabled` field: Specifies whether the application is allowed to be deployed for the given domain and environment.
                #             - the `clusterExclusions.<clusterName>` field: Defines if the destination cluster is excluded from deploying the application.
                #             In essence, the `deployments` field describes the overall deployment context of the application regardless of its logical clusters for the specified domain and environment.
                #             Meanwhile, `clusterExclusions` provides exceptions where the application is intentionally not deployed to certain clusters yet.
                #             Ideally, the application should be deployed to all destination clusters associated with the given domain and environment.
                # Value Shortcuts:
                # - `clusterName`: the name of the cluster
                # - `clusterPrefix`: the prefix of the cluster
                # - `clusterSuffix`: the suffix of the cluster
                - list:
                    elements:
                      - values:
                          clusterName: "{{ .name }}"
                          clusterPrefix: '{{ index .metadata.labels "cluster/prefix" }}'
                          clusterSuffix: '{{ index .metadata.labels "cluster/suffix" }}'
                          active: '{{ and (dig .values.domain .values.environment "enabled" false .deployments) (not (dig "clusterExclusions" .name false .)) }}'
      selector:
        matchExpressions:
          - key: values.active
            operator: In
            values:
              - "true"
  template:
    metadata:
      name: "{{ .values.clusterPrefix }}-{{ index .path.segments 1 }}-{{ .values.clusterSuffix }}"
      annotations:
        applicationset/params: "{{ . | toJson }}"
      labels:
        systems.ardikabs.com/service: "{{ index .path.segments 1 }}"
        systems.ardikabs.com/cluster: "{{ .values.clusterName }}"
        systems.ardikabs.com/env: "{{ .values.environment }}"
        systems.ardikabs.com/domain: "{{ .values.domain }}"
      namespace: argocd
    spec:
      project: stg-backend-apps
      source:
        repoURL: git@github.com:ardikabs/argocd-applicationset-patterns.git
        targetRevision: HEAD
        path: "helm/{{ index .path.segments 1 }}"
        helm:
          releaseName: "{{ index .path.segments 1 }}"
      destination:
        name: "{{ .values.clusterName }}"
        namespace: "{{ .namespace }}"
  templatePatch: |-
    {{- $globals := .globals }}
    {{- $defVal := dig .values.environment dict .defaults.environments }}
    {{- $runtime := dig .values.clusterName dict .clusters }}
    {{- $app := dig .values.domain .values.environment dict .deployments }}

    metadata:
    {{- if hasKey $app "annotations" }}
      annotations: {{ $app.annotations | toJson }}
    {{- else }}
      annotations: {}
    {{- end }}

    {{- if and (hasKey $app "cleanupOnDeletion") ($app.cleanupOnDeletion) }}
      finalizers: ["resources-finalizer.argocd.argoproj.io"]
    {{- else }}
      finalizers: []
    {{- end}}

    {{- if hasKey $app "labels" }}
      labels: {{ $app.labels | toJson }}
    {{- else }}
      labels: {}
    {{- end }}

    spec:
      source:
        helm:
          valueFiles: {{ default $defVal.helm.valueFiles (dig "helm" "valueFiles" list $app) | toJson }}

          {{- $runtimeHelmParameters := dig "helm" "parameters" list $runtime }}
          {{- $appHelmParameters := dig "helm" "parameters" list $app }}
          parameters: {{ concat $runtimeHelmParameters $appHelmParameters | toJson }}

      syncPolicy: {{ default $defVal.syncPolicy (dig "syncPolicy" dict $app) | toJson }}

      {{- $appIgnoreDifferences := dig "ignoreDifferences" list $app }}
      {{- $ignoreDifferences := concat $globals.ignoreDifferences $appIgnoreDifferences }}
      ignoreDifferences: {{ $ignoreDifferences | toJson }}
